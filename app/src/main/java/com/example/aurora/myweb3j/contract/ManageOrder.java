package com.example.aurora.myweb3j.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class ManageOrder extends Contract {
    private static final String BINARY = "0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a03161781556001555b5b610c958061003c6000396000f300606060405236156100885763ffffffff60e060020a60003504166303c1463c811461009157806326839f17146100b35780634122a29e146100da5780638ac7d79c146100ef5780638da5cb5b1461010457806394e8767d14610130578063bd27d56e14610155578063d7062e27146101f1578063d9183be514610256578063f8b2cb4f14610365575b61008f5b5b565b005b341561009957fe5b6100a1610393565b60408051918252519081900360200190f35b34156100bb57fe5b6100c660043561039a565b604080519115158252519081900360200190f35b34156100e257fe5b61008f6004356103ea565b005b34156100f757fe5b61008f600435610503565b005b341561010c57fe5b61011461061a565b60408051600160a060020a039092168252519081900360200190f35b341561013857fe5b6100a1600435610629565b60408051918252519081900360200190f35b341561015d57fe5b610171600160a060020a0360043516610674565b6040805160208082528351818301528351919283929083019185019080838382156101b7575b8051825260208311156101b757601f199092019160209182019101610197565b505050905090810190601f1680156101e35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101f957fe5b604080516020600460443581810135601f810184900484028501840190955284845261008f948235600160a060020a031694602480359560649492939190920191819084018382808284375094965061072a95505050505050565b005b341561025e57fe5b61008f600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375094965061096095505050505050565b005b341561036d57fe5b6100a1600160a060020a0360043516610a83565b60408051918252519081900360200190f35b6001545b90565b600160a060020a033316600090815260066020526040812054819010156103c3575060006103e5565b50600160a060020a033316600090815260066020526040902080548201905560015b919050565b600081815260046020526040812060010154829033600160a060020a039081169116146104175760006000fd5b600183815b60008281526004602052604090206002015460a060020a900460ff16600381111561044357fe5b1461044e5760006000fd5b600085815260046020526040902060020180546003919060a060020a60ff02191660a060020a835b021790555060008581526004602052604080822060018101546003909101549151600160a060020a039091169650869282156108fc02929190818181858888f1935050505015156104c357fe5b60008581526004602090815260408083206003810154600190910154600160a060020a031684526006909252909120805490910190555b5b50505b505050565b600081815260046020526040812060010154829033600160a060020a039081169116146105305760006000fd5b600183815b60008281526004602052604090206002015460a060020a900460ff16600381111561055c57fe5b146105675760006000fd5b60008581526004602052604090206002908101805460a060020a60ff02191660a060020a835b021790555060008581526004602052604080822060028101546003909101549151600160a060020a039091169650869282156108fc02929190818181858888f1935050505015156105da57fe5b60008581526004602090815260408083206003810154600290910154600160a060020a031684526006909252909120805490910190555b5b50505b505050565b600054600160a060020a031681565b6000811515610640575060fc60020a6003026103e5565b5b60008211156103e557610100815b049050600a825b0660300160f860020a0217600a825b049150610640565b5b5b919050565b61067c610aa2565b600160a060020a03821660009081526005602090815260409182902060030180548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909183018282801561071c5780601f106106f15761010080835404028352916020019161071c565b820191906000526020600020905b8154815290600101906020018083116106ff57829003601f168201915b50939450505050505b919050565b610732610ab4565b600160a060020a03331660009081526006602052604090205483908190101561075b5760006000fd5b846005600082600160a060020a0316600160a060020a0316815260200190815260200160002060020160405180828054600181600116156101000203166002900480156107df5780601f106107bd5761010080835404028352918201916107df565b820191906000526020600020905b8154815290600101906020018083116107cb575b5050604051908190039020151591506107fa90505760006000fd5b600180548101908190556040805160c081018252918252600160a060020a0333811660208401528816908201526060810160005b81526020808201889052426040928301526001805460009081526004835283902084518155918401519082018054600160a060020a0319908116600160a060020a0393841617909155928401516002830180549094169116178083556060840151939650869391929060a060020a60ff02191660a060020a8360038111156108b257fe5b0217905550608082015160038083019190915560a090920151600490910155600160a060020a038716600090815260056020908152604090912086516108ff939190910191870190610aeb565b50600180546000908152600460208181526040808420850154600160a060020a031684526006825280842080548b90039055845484529190529020600201805460a060020a60ff02191660a060020a835b02179055505b5b505b5050505050565b610968610b6a565b506040805160a0810182528581526020808201869052818301859052825160808181018552604882527f30303030303030303030303030303030303030303030303030303030303030308284018190528286015260c460020a670303030303030303026060838101919091528401919091528201849052600160a060020a033316600090815260058252929092208151805192938493610a0b9284920190610aeb565b506020828101518051610a249260018501920190610aeb565b5060408201518051610a40916002840191602090910190610aeb565b5060608201518051610a5c916003840191602090910190610aeb565b5060808201518051610a78916004840191602090910190610aeb565b5050505b5050505050565b600160a060020a0381166000908152600660205260409020545b919050565b60408051602081019091526000815290565b6040805160c0810182526000808252602082018190529181018290529060608201905b815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b2c57805160ff1916838001178555610b59565b82800160010185558215610b59579182015b82811115610b59578251825591602001919060010190610b3e565b5b50610b66929150610c36565b5090565b60a060405190810160405280610b7e610aa2565b8152602001610b8b610aa2565b8152602001610b98610aa2565b8152602001610ba5610aa2565b8152602001610bb2610aa2565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b2c57805160ff1916838001178555610b59565b82800160010185558215610b59579182015b82811115610b59578251825591602001919060010190610b3e565b5b50610b66929150610c36565b5090565b61039791905b80821115610b665760008155600101610c3c565b5090565b90565b604080516020810190915260008152905600a165627a7a723058208e5c1107f4ab8fdddd372378b88590c407b6e0a5cdfa5aeaaa9b2c5fb08528cf0029";

    private ManageOrder(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ManageOrder(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<Uint256> listedOrder() {
        Function function = new Function("listedOrder", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> depositEther(Uint256 _value) {
        Function function = new Function("depositEther", Arrays.<Type>asList(_value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> abortOrder(Uint256 order_no) {
        Function function = new Function("abortOrder", Arrays.<Type>asList(order_no), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> confirmOrder(Uint256 order_no) {
        Function function = new Function("confirmOrder", Arrays.<Type>asList(order_no), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Bytes32> uintToBytes(Uint256 v) {
        Function function = new Function("uintToBytes", 
                Arrays.<Type>asList(v), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> queryParking(Address _seller) {
        Function function = new Function("queryParking", 
                Arrays.<Type>asList(_seller), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> newOrder(Address _seller, Uint256 _price, Utf8String _avail_hour) {
        Function function = new Function("newOrder", Arrays.<Type>asList(_seller, _price, _avail_hour), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> newParking(Utf8String _name, Utf8String _phone, Utf8String _post_code, Utf8String _park_address) {
        Function function = new Function("newParking", Arrays.<Type>asList(_name, _phone, _post_code, _park_address), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Uint256> getBalance(Address _user) {
        Function function = new Function("getBalance", 
                Arrays.<Type>asList(_user), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<ManageOrder> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ManageOrder.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<ManageOrder> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ManageOrder.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static ManageOrder load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ManageOrder(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ManageOrder load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ManageOrder(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
