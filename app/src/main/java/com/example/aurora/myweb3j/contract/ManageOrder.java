package com.example.aurora.myweb3j.contract;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.Future;

/**
 * Auto generated code.<br>
 * <strong>Do not modify!</strong><br>
 * Please use {@link org.web3j.codegen.SolidityFunctionWrapperGenerator} to update.
 *
 * <p>Generated with web3j version 2.2.1.
 */
public final class ManageOrder extends Contract {
    private static final String BINARY = "0x6060604052341561000c57fe5b5b60008054600160a060020a03191633600160a060020a031617815560018190556002555b5b611cb3806100416000396000f300606060405236156100b45763ffffffff60e060020a6000350416630202ae2881146100db57806303c1463c1461013757806326839f17146101c7578063395ff584146101ee5780634122a29e1461027e5780635e57966d14610293578063653721471461032f5780638ac7d79c146103bf5780638da5cb5b146103d4578063b6e3069a14610400578063c0044b8f14610496578063d9183be514610529578063e939567914610638578063f8b2cb4f146106cb575b6100d95b600160a060020a03331660009081526008602052604090208054340190555b565b005b34156100e357fe5b604080516020600460443581810135601f81018490048402850184019095528484526100d99482359460248035956064949293919092019181908401838280828437509496506106f995505050505050565b005b341561013f57fe5b610147610935565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101cf57fe5b6101da600435610bef565b604080519115158252519081900360200190f35b34156101f657fe5b610147610c3f565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028657fe5b6100d9600435610cd8565b005b341561029b57fe5b610147600160a060020a0360043516610de1565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033757fe5b610147610e82565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103c757fe5b6100d9600435610f10565b005b34156103dc57fe5b6103e4611019565b60408051600160a060020a039092168252519081900360200190f35b341561040857fe5b61014760ff60043516611028565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561049e57fe5b6101476004356110a0565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561053157fe5b6100d9600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375050604080516020601f89358b0180359182018390048302840183019094528083529799988101979196509182019450925082915084018382808284375094965061145e95505050505050565b005b341561064057fe5b6101476004356115c1565b60408051602080825283518183015283519192839290830191850190808383821561018d575b80518252602083111561018d57601f19909201916020918201910161016d565b505050905090810190601f1680156101b95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106d357fe5b6106e7600160a060020a03600435166116ed565b60408051918252519081900360200190f35b610701611a6e565b600160a060020a03331660009081526008602052604090205483908190101561072a5760006000fd5b8460076000828152602001908152602001600020600401604051808280546001816001161561010002031660029004801561079c5780601f1061077a57610100808354040283529182019161079c565b820191906000526020600020905b815481529060010190602001808311610788575b5050604051908190039020151591506107b790505760006000fd5b6001805481018082556040805160e081018252918252600160a060020a0333811660208085019190915260008b81526007909152828120909401541690820152606081018890529060808201905b81526020808201889052426040928301526001805460009081526006835283902084518155918401518282018054600160a060020a0319908116600160a060020a03938416179091559385015160028401805490951691161790925560608301516003808301919091556080840151600483018054959850889593949193909260ff199091169190849081111561089857fe5b021790555060a0820151816005015560c08201518160060155905050836007600088815260200190815260200160002060050190805190602001906108de929190611aac565b50600180546000908152600660208181526040808420850154600160a060020a031684526008825280842080548b90039055845484529190529020600401805460ff191682805b02179055505b5b505b5050505050565b61093d611b2b565b6000610947611b3d565b6000610951611b2b565b610959611b2b565b610961611b2b565b610969611b2b565b610971611b2b565b60009750600095505b600154600101861015610b045760008681526006602052604090206001015433600160a060020a03908116911614806109d0575060008681526006602052604090206002015433600160a060020a039081169116145b8015610a29575060025b60008781526006602052604090206004015460ff1660038111156109fa57fe5b14158015610a29575060035b60008781526006602052604090206004015460ff166003811115610a2657fe5b14155b5b8015610a365750600488105b15610af857600086815260066020526040902054610a53906115c1565b600087815260066020526040902060030154909550610a71906115c1565b600087815260066020526040902060040154909450610a929060ff16611028565b600087815260066020526040902060050154909350610ab0906115c1565b9150610ad160066000888152602001908152602001600020600601546115c1565b9050610ae0858585858561170c565b878960048110610aec57fe5b60200201526001909701965b5b60019095019461097a565b610b418760005b60200201518860015b60200201518960025b60200201518a60035b6020020151602060405190810160405280600081525061170c565b8051610b5591600591602090910190611aac565b506005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bdc5780601f10610bb157610100808354040283529160200191610bdc565b820191906000526020600020905b815481529060010190602001808311610bbf57829003601f168201915b505050505098505b505050505050505090565b600160a060020a03331660009081526008602052604081205481901015610c1857506000610c3a565b50600160a060020a033316600090815260086020526040902080548201905560015b919050565b610c47611b2b565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610ccd5780601f10610ca257610100808354040283529160200191610ccd565b820191906000526020600020905b815481529060010190602001808311610cb057829003601f168201915b505050505090505b90565b600081815260066020526040812060010154829033600160a060020a03908116911614610d055760006000fd5b600183815b60008281526006602052604090206004015460ff166003811115610d2a57fe5b14610d355760006000fd5b600085815260066020526040902060040180546003919060ff19166001835b021790555060008581526006602052604080822060018101546005909101549151600160a060020a039091169650869282156108fc02929190818181858888f193505050501515610da157fe5b60008581526006602090815260408083206005810154600190910154600160a060020a031684526008909252909120805490910190555b5b50505b505050565b610de9611b2b565b610df1611b2b565b60006014604051805910610e025750595b908082528060200260200182016040525b509150600090505b6014811015610e77578060130360080260020a84600160a060020a0316811515610e4157fe5b0460f860020a028282815181101515610e5657fe5b906020010190600160f860020a031916908160001a9053505b600101610e1b565b8192505b5050919050565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610f085780601f10610edd57610100808354040283529160200191610f08565b820191906000526020600020905b815481529060010190602001808311610eeb57829003601f168201915b505050505081565b600081815260066020526040812060010154829033600160a060020a03908116911614610f3d5760006000fd5b600183815b60008281526006602052604090206004015460ff166003811115610f6257fe5b14610f6d5760006000fd5b600085815260066020526040902060040180546002919060ff19166001835b021790555060008581526006602052604080822060028101546005909101549151600160a060020a039091169650869282156108fc02929190818181858888f193505050501515610fd957fe5b60008581526006602090815260408083206005810154600290910154600160a060020a031684526008909252909120805490910190555b5b50505b505050565b600054600160a060020a031681565b611030611b2b565b6000805b83600381111561104057fe5b141561104e5750600161108c565b60015b83600381111561105d57fe5b141561106b5750600261108c565b60025b83600381111561107a57fe5b14156110885750600361108c565b5060045b5b5b611097816115c1565b91505b50919050565b6110a8611b2b565b6000828152600760209081526040918290206002908101805484516001821615610100026000190190911692909204601f81018490048402830184019094528382526113b69391929091908301828280156111445780601f1061111957610100808354040283529160200191611144565b820191906000526020600020905b81548152906001019060200180831161112757829003601f168201915b5050506000868152600760209081526040918290206003018054835160026001831615610100026000190190921691909104601f8101849004840282018401909452838152945092508301828280156111de5780601f106111b3576101008083540402835291602001916111de565b820191906000526020600020905b8154815290600101906020018083116111c157829003601f168201915b5050506000878152600760209081526040918290206004018054835160026001831615610100026000190190921691909104601f8101849004840282018401909452838152945092508301828280156112785780601f1061124d57610100808354040283529160200191611278565b820191906000526020600020905b81548152906001019060200180831161125b57829003601f168201915b5050506000888152600760209081526040918290206005018054835160026001831615610100026000190190921691909104601f8101849004840282018401909452838152945092508301828280156113125780601f106112e757610100808354040283529160200191611312565b820191906000526020600020905b8154815290600101906020018083116112f557829003601f168201915b5050506000898152600760209081526040918290206006018054835160026001831615610100026000190190921691909104601f8101849004840282018401909452838152945092508301828280156113ac5780601f10611381576101008083540402835291602001916113ac565b820191906000526020600020905b81548152906001019060200180831161138f57829003601f168201915b505050505061170c565b80516113ca91600591602090910190611aac565b506005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156114515780601f1061142657610100808354040283529160200191611451565b820191906000526020600020905b81548152906001019060200180831161143457829003601f168201915b505050505090505b919050565b611466611b7d565b506002805460019081018083556040805160e08101825282815233600160a060020a0390811660208084019182528385018c815260608086018d905260808087018d905287519081018852604881527f30303030303030303030303030303030303030303030303030303030303030308185018190528189015260c460020a670303030303030303029181019190915260a086015260c085018a9052600096875260078252949095208351815590519581018054600160a060020a0319169690921695909517905590518051919485949361154693918501920190611aac565b5060608201518051611562916003840191602090910190611aac565b506080820151805161157e916004840191602090910190611aac565b5060a0820151805161159a916005840191602090910190611aac565b5060c082015180516115b6916006840191602090910190611aac565b5050505b5050505050565b6115c9611b2b565b60006115d3611b2b565b600060006115df611b2b565b600060649550856040518059106115f35750595b908082528060200260200182016040525b509450600093505b871561165b57600a885b069250600a885b0497508260300160f860020a02858580600101965081518110151561163e57fe5b906020010190600160f860020a031916908160001a90535061160c565b8360010160405180591061166c5750595b908082528060200260200182016040525b509150600090505b8381116116de578481850381518110151561169c57fe5b90602001015160f860020a900460f860020a0282828151811015156116bd57fe5b906020010190600160f860020a031916908160001a9053505b600101611685565b8196505b505050505050919050565b600160a060020a0381166000908152600860205260409020545b919050565b611714611b2b565b61171c611b2b565b611724611b2b565b61172c611b2b565b611734611b2b565b61173c611b2b565b611744611b2b565b61174c611b2b565b600060008e98508d97508c96508b95508a94508451865188518a518c510101010160040160405180591061177d5750595b908082528060200260200182016040525b50935083925060009150600090505b88518110156117fc5788818151811015156117b457fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156117db57fe5b906020010190600160f860020a031916908160001a9053505b60010161179d565b8251600183019260f960020a60150291859190811061181757fe5b906020010190600160f860020a031916908160001a905350600090505b875181101561189357878181518110151561184b57fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561187257fe5b906020010190600160f860020a031916908160001a9053505b600101611834565b8251600183019260f960020a6015029185919081106118ae57fe5b906020010190600160f860020a031916908160001a905350600090505b865181101561192a5786818151811015156118e257fe5b90602001015160f860020a900460f860020a02838380600101945081518110151561190957fe5b906020010190600160f860020a031916908160001a9053505b6001016118cb565b8251600183019260f960020a60150291859190811061194557fe5b906020010190600160f860020a031916908160001a905350600090505b85518110156119c157858181518110151561197957fe5b90602001015160f860020a900460f860020a0283838060010194508151811015156119a057fe5b906020010190600160f860020a031916908160001a9053505b600101611962565b8251600183019260f960020a6015029185919081106119dc57fe5b906020010190600160f860020a031916908160001a905350600090505b8451811015611a58578481815181101515611a1057fe5b90602001015160f860020a900460f860020a028383806001019450815181101515611a3757fe5b906020010190600160f860020a031916908160001a9053505b6001016119f9565b8299505b50505050505050505095945050505050565b6040805160e081018252600080825260208201819052918101829052606081018290529060808201905b815260200160008152602001600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611aed57805160ff1916838001178555611b1a565b82800160010185558215611b1a579182015b82811115611b1a578251825591602001919060010190611aff565b5b50611b27929150611c54565b5090565b60408051602081019091526000815290565b6080604051908101604052806004905b611b55611b2b565b815260200190600190039081611b4d5790505090565b60408051602081019091526000815290565b6040805160e08101825260008082526020820152908101611b9c611b2b565b8152602001611ba9611b2b565b8152602001611bb6611b2b565b8152602001611bc3611b2b565b8152602001611bd0611b2b565b905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611aed57805160ff1916838001178555611b1a565b82800160010185558215611b1a579182015b82811115611b1a578251825591602001919060010190611aff565b5b50611b27929150611c54565b5090565b610cd591905b80821115611b275760008155600101611c5a565b5090565b90565b604080516020810190915260008152905600a165627a7a72305820704fcf388c6527d5c6c855372b6ab9bc41d0735ac2a5c866523934324df16f540029";

    private ManageOrder(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    private ManageOrder(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public Future<TransactionReceipt> newOrder(Uint256 _parkingNo, Uint256 _price, Utf8String _avail_hour) {
        Function function = new Function("newOrder", Arrays.<Type>asList(_parkingNo, _price, _avail_hour), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> listedOrder() {
        Function function = new Function("listedOrder", Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> depositEther(Uint256 _value) {
        Function function = new Function("depositEther", Arrays.<Type>asList(_value), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> uintto() {
        Function function = new Function("uintto", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> abortOrder(Uint256 order_no) {
        Function function = new Function("abortOrder", Arrays.<Type>asList(order_no), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> addressToString(Address x) {
        Function function = new Function("addressToString", Arrays.<Type>asList(x), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> result() {
        Function function = new Function("result", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> confirmOrder(Uint256 order_no) {
        Function function = new Function("confirmOrder", Arrays.<Type>asList(order_no), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Address> owner() {
        Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Utf8String> enumToString(Uint8 _state) {
        Function function = new Function("enumToString", 
                Arrays.<Type>asList(_state), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<TransactionReceipt> queryParking(Uint256 _parkingNo) {
        Function function = new Function("queryParking", Arrays.<Type>asList(_parkingNo), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<TransactionReceipt> newParking(Utf8String _name, Utf8String _phone, Utf8String _post_code, Utf8String _park_address) {
        Function function = new Function("newParking", Arrays.<Type>asList(_name, _phone, _post_code, _park_address), Collections.<TypeReference<?>>emptyList());
        return executeTransactionAsync(function);
    }

    public Future<Utf8String> uintToString(Uint256 v) {
        Function function = new Function("uintToString", 
                Arrays.<Type>asList(v), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public Future<Uint256> getBalance(Address _user) {
        Function function = new Function("getBalance", 
                Arrays.<Type>asList(_user), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallSingleValueReturnAsync(function);
    }

    public static Future<ManageOrder> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ManageOrder.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static Future<ManageOrder> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployAsync(ManageOrder.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    public static ManageOrder load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ManageOrder(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ManageOrder load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ManageOrder(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }
}
